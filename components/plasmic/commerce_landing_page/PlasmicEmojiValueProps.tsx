// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3unu7Ga9VoC4K7UxDprt9q
// Component: l8qF1Ymn2krC

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Value from "../../Value"; // plasmic-import: 7dtSRzTgoyFA/component
import Button from "../../Button"; // plasmic-import: C340TtQ1qMJ_/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3unu7Ga9VoC4K7UxDprt9q/projectcss
import sty from "./PlasmicEmojiValueProps.module.css"; // plasmic-import: l8qF1Ymn2krC/css

import PlaneIcon from "./icons/PlasmicIcon__Plane"; // plasmic-import: XxPNNHEnmEve/icon
import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: gtiXXUGcCZ-V/icon
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: EZI3azBNTV_Y/icon
import DocumentIcon from "./icons/PlasmicIcon__Document"; // plasmic-import: -P99mQT_CbUV/icon
import LockIcon from "./icons/PlasmicIcon__Lock"; // plasmic-import: NCa3W2kHqQxI/icon

createPlasmicElementProxy;

export type PlasmicEmojiValueProps__VariantMembers = {};
export type PlasmicEmojiValueProps__VariantsArgs = {};
type VariantPropType = keyof PlasmicEmojiValueProps__VariantsArgs;
export const PlasmicEmojiValueProps__VariantProps =
  new Array<VariantPropType>();

export type PlasmicEmojiValueProps__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicEmojiValueProps__ArgsType;
export const PlasmicEmojiValueProps__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicEmojiValueProps__OverridesType = {
  root?: Flex__<"section">;
};

export interface DefaultEmojiValuePropsProps {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEmojiValueProps__RenderFunc(props: {
  variants: PlasmicEmojiValueProps__VariantsArgs;
  args: PlasmicEmojiValueProps__ArgsType;
  overrides: PlasmicEmojiValueProps__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {renderPlasmicSlot({
        defaultContents: (
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ql1Er)}
          >
            <Value
              children2={
                <Button
                  className={classNames("__wab_instance", sty.button___3Xgyi)}
                  colors={"black"}
                  endIcon={
                    <RightArrowIcon
                      className={classNames(projectcss.all, sty.svg___2P6J)}
                      role={"img"}
                    />
                  }
                  rounded={true}
                  size={"large"}
                  submitsForm={true}
                >
                  {"Read our letter"}
                </Button>
              }
              className={classNames("__wab_instance", sty.value__z36E0)}
              icon={
                <PlaneIcon
                  className={classNames(projectcss.all, sty.svg___4JKCo)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ntDwd
                )}
              >
                {"Worldwide shipping"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ojJfW
                )}
              >
                {"Special financing and earn rewards."}
              </div>
            </Value>
            <Value
              children2={
                <Button
                  className={classNames("__wab_instance", sty.button__rIg5Q)}
                  colors={"black"}
                  endIcon={
                    <RightArrowIcon
                      className={classNames(projectcss.all, sty.svg__epiTq)}
                      role={"img"}
                    />
                  }
                  rounded={true}
                  size={"large"}
                  submitsForm={true}
                >
                  {"Read our letter"}
                </Button>
              }
              className={classNames("__wab_instance", sty.value__t1BQx)}
              icon={
                <DocumentIcon
                  className={classNames(projectcss.all, sty.svg__hhOj0)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__l4SBc
                )}
              >
                {"30-day guarantee"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bQyn
                )}
              >
                {"Free return policy."}
              </div>
            </Value>
            <Value
              children2={
                <Button
                  className={classNames("__wab_instance", sty.button__emhRx)}
                  colors={"black"}
                  endIcon={
                    <RightArrowIcon
                      className={classNames(projectcss.all, sty.svg___25L3S)}
                      role={"img"}
                    />
                  }
                  rounded={true}
                  size={"large"}
                  submitsForm={true}
                >
                  {"Read our letter"}
                </Button>
              }
              className={classNames("__wab_instance", sty.value__z5F91)}
              icon={
                <LockIcon
                  className={classNames(projectcss.all, sty.svg__cYnXz)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7VEgu
                )}
              >
                {"Secured payments"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fdlWf
                )}
              >
                {"We accept major credit cards."}
              </div>
            </Value>
          </Stack__>
        ),
        value: args.children
      })}
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEmojiValueProps__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEmojiValueProps__VariantsArgs;
    args?: PlasmicEmojiValueProps__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEmojiValueProps__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEmojiValueProps__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEmojiValueProps__ArgProps,
          internalVariantPropNames: PlasmicEmojiValueProps__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEmojiValueProps__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEmojiValueProps";
  } else {
    func.displayName = `PlasmicEmojiValueProps.${nodeName}`;
  }
  return func;
}

export const PlasmicEmojiValueProps = Object.assign(
  // Top-level PlasmicEmojiValueProps renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicEmojiValueProps
    internalVariantProps: PlasmicEmojiValueProps__VariantProps,
    internalArgProps: PlasmicEmojiValueProps__ArgProps
  }
);

export default PlasmicEmojiValueProps;
/* prettier-ignore-end */
