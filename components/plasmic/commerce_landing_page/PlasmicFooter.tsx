// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3unu7Ga9VoC4K7UxDprt9q
// Component: SNxDYAIWsvky

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: QdBFQkE6cWbZ/component
import Button from "../../Button"; // plasmic-import: C340TtQ1qMJ_/component
import CopyrightSocialLanguage from "../../CopyrightSocialLanguage"; // plasmic-import: CxPoe5mhD0gN/component

import { useScreenVariants as useScreenVariantskawom9Dsb4U2 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Kawom9dsb4u2/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3unu7Ga9VoC4K7UxDprt9q/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: SNxDYAIWsvky/css

import EmailIcon from "./icons/PlasmicIcon__Email"; // plasmic-import: QkkDezTTRLfi/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: oJUthRuLBN6z/icon
import MenuIcon from "./icons/PlasmicIcon__Menu"; // plasmic-import: gtiXXUGcCZ-V/icon
import DeliveryIcon from "./icons/PlasmicIcon__Delivery"; // plasmic-import: QlzLxGntqXaU/icon
import EnterIcon from "./icons/PlasmicIcon__Enter"; // plasmic-import: EIzt5BhLRBKE/icon
import QuestionIcon from "./icons/PlasmicIcon__Question"; // plasmic-import: IeO4nxH_Hs09/icon

createPlasmicElementProxy;

export type PlasmicFooter__VariantMembers = {};
export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  root?: Flex__<"section">;
  textInput?: Flex__<typeof TextInput>;
  copyrightSocialLanguage?: Flex__<typeof CopyrightSocialLanguage>;
};

export interface DefaultFooterProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantskawom9Dsb4U2()
  });

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___0ITm4)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__qv4F7)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rTzWl
            )}
          >
            {"Subscribe"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__x0Ymk
            )}
          >
            {
              "Sign up for exclusive offers, original stories, activism, events and more."
            }
          </div>
          <TextInput
            data-plasmic-name={"textInput"}
            data-plasmic-override={overrides.textInput}
            className={classNames("__wab_instance", sty.textInput)}
            onChange={(...eventArgs) => {
              generateStateOnChangeProp($state, ["textInput", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }}
            placeholder={"Email address..."}
            showStartIcon={true}
            startIcon={
              <EmailIcon
                className={classNames(projectcss.all, sty.svg__obQ4C)}
                role={"img"}
              />
            }
            value={generateStateValueProp($state, ["textInput", "value"]) ?? ""}
          />

          <Button
            className={classNames("__wab_instance", sty.button__iqP7X)}
            colors={"black"}
            submitsForm={true}
          >
            {"Sign me up"}
          </Button>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__x2YGb)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qsv7
            )}
          >
            {"Help"}
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__atNrM)}
          >
            <Button
              showStartIcon={true}
              startIcon={
                <DeliveryIcon
                  className={classNames(projectcss.all, sty.svg__ou7Wi)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              {"Order status"}
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__eugtf)}
              showStartIcon={true}
              startIcon={
                <EnterIcon
                  className={classNames(projectcss.all, sty.svg__iyL5)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mlFY
                )}
              >
                {"Returns and exchanges"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__zrErq)}
              showStartIcon={true}
              startIcon={
                <QuestionIcon
                  className={classNames(projectcss.all, sty.svg__giu9)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fHpun
                )}
              >
                {"Help center"}
              </div>
            </Button>
          </Stack__>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___45VAn)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yeR7S
            )}
          >
            {"More info"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___3Tov1)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jXoKt)}
            >
              <Button submitsForm={true}>{"Gift cards"}</Button>
              <Button
                className={classNames("__wab_instance", sty.button__f6CwO)}
                submitsForm={true}
              >
                {"Find a store"}
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__b8Qfq)}
                submitsForm={true}
              >
                {"Careers"}
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__cZlIs)}
                submitsForm={true}
              >
                {"Sitemap"}
              </Button>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vGfN)}
            >
              <Button
                className={classNames("__wab_instance", sty.button___2EYr8)}
                submitsForm={true}
              >
                {"Group sales"}
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__nBqGd)}
                submitsForm={true}
              >
                {"Privacy policy"}
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__usKjk)}
                submitsForm={true}
              >
                {"Contact us"}
              </Button>
            </Stack__>
          </div>
        </Stack__>
      </Stack__>
      <CopyrightSocialLanguage
        data-plasmic-name={"copyrightSocialLanguage"}
        data-plasmic-override={overrides.copyrightSocialLanguage}
        className={classNames("__wab_instance", sty.copyrightSocialLanguage)}
      />
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "textInput", "copyrightSocialLanguage"],
  textInput: ["textInput"],
  copyrightSocialLanguage: ["copyrightSocialLanguage"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "section";
  textInput: typeof TextInput;
  copyrightSocialLanguage: typeof CopyrightSocialLanguage;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    copyrightSocialLanguage: makeNodeComponent("copyrightSocialLanguage"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
